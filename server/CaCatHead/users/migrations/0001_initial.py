# Generated by Django 4.1.2 on 2022-10-15 10:55

import django.core.validators
from django.db import migrations, models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='用户名')),
                ('nickname', models.CharField(blank=True, default='', max_length=50, verbose_name='昵称')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='电子邮件')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='是否可用')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='是否教师')),
                ('is_staff', models.BooleanField(default=False, verbose_name='管理员')),
                ('student_id', models.CharField(blank=True, default=None, max_length=30, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+$'), 'Enter a valid student id')], verbose_name='学号')),
                ('student_name', models.CharField(blank=True, max_length=40, verbose_name='学生姓名')),
                ('class_id', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(re.compile('^\\d+$'), 'Enter a valid class id')], verbose_name='班级编号')),
                ('student_college', models.CharField(blank=True, max_length=40, verbose_name='所在学院')),
                ('student_major', models.CharField(blank=True, max_length=40, verbose_name='主修专业')),
                ('student_major_field', models.CharField(blank=True, max_length=40, verbose_name='专业方向')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户组',
                'ordering': ['student_id'],
            },
        ),
    ]
